#!/usr/bin/env python3

"""problem_044.py

Problem 44: Pentagon numbers

Pentagonal numbers are generated by the formula, P(n) = n(3n - 1)/2. The first
ten pentagonal numbers are:

    1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P(4) + P(7) = 22 + 70 = 92 = P(8). However, their
difference, 70 - 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, P(m) and P(k), for which their sum and
difference is pentagonal and D = |P(k) - P(m)| is minimised; what is the value
of D?

Author: Curtis Belmonte
"""

import common as com

# PARAMETERS ##################################################################

# N/A

# SOLUTION ####################################################################

def solve():
    # generate pentagonal numbers up to threshold
    # TODO: remove need for arbitrary threshold
    pentagonal_count = 3000
    pentagonal_list = []
    for n in range(pentagonal_count):
        pentagonal_list.append(com.pentagonal(n))
        
    # add pentagonal numbers to set for fast lookup
    pentagonal_set = set(pentagonal_list)
    
    # compute minimum difference of pentagonal numbers that satisfy conditions
    min_diff = com.INFINITY
    for m in range(1, pentagonal_count):
        for k in range(m + 1, pentagonal_count):
            # check if sum of P(m) and P(k) is pentagonal
            if pentagonal_list[k] + pentagonal_list[m] in pentagonal_set:
                # check if difference of P(m) and P(k) is pentagonal
                diff = pentagonal_list[k] - pentagonal_list[m]
                if diff in pentagonal_set and diff < min_diff:
                    min_diff = diff
    
    return min_diff


if __name__ == '__main__':
    print(solve())
