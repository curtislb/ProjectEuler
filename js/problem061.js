/*
Project Euler - Problem 61: Cyclical figurate numbers

Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are
all figurate (polygonal) numbers and are generated by the following formulae:
 
Triangle      P(3, n) = n(n+1)/2       1, 3, 6, 10, 15, ...
Square        P(4, n) = n^2            1, 4, 9, 16, 25, ...
Pentagonal    P(5, n) = n(3n - 1)/2    1, 5, 12, 22, 35, ...
Hexagonal     P(6, n) = n(2n - 1)      1, 6, 15, 28, 45, ...
Heptagonal    P(7, n) = n(5n - 3)/2    1, 7, 18, 34, 55, ...
Octagonal     P(8, n) = n(3n - 2)      1, 8, 21, 40, 65, ...
 
The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three
interesting properties:
 
1. The set is cyclic, in that the last two digits of each number is the first 
two digits of the next number (including the last number with the first).
 
2. Each polygonal type: triangle (P(3,127) = 8128), square (P(4, 91) = 8281),
and pentagonal (P(5, 44) = 2882), is represented by a different number in the
set.
 
3. This is the only set of 4-digit numbers with this property.
 
Find the sum of the only ordered set of six cyclic 4-digit numbers for which
each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and
octagonal, is represented by a different number in the set.
*/

/* Determines if the array of string integers numList is cyclic. */
function isCyclic(numList) {
    var len = numList.length;
    var lastNum = numList[len - 1];
    return len == 6 && lastNum.substr(lastNum.length - 2) == numList[0].substr(0, 2);
}

/* Returns the sum of the array of string integers numList. */
function sumStringInts(numList) {
    return numList.reduce(function(m, n) { return parseInt(m) + parseInt(n); });
}

/* Finds a cyclic set of numbers within pStrings that satisfies the problem criteria. */
function findCycle(pStrings, found, kUsed) {
    if (isCyclic(found)) {
        return found;
    }
    
    var lenFound = found.length;
    var lenLastFound = found[lenFound-1].length;
    var lenPkStrings;
    var newKUsed;
    var cycle;
    for (var k = 0; k < 5; k++) {
        if (kUsed.indexOf(k) == -1) {
            lenPkStrings = pStrings[k].length;
            for (var i = 0; i < lenPkStrings; i++) {
                if (pStrings[k][i].substr(0, 2) == found[lenFound-1].substr(lenLastFound-2)) {
                    newKUsed = kUsed.concat([k]);
                    cycle = findCycle(pStrings, found.concat([pStrings[k][i]]), newKUsed);
                    if ((typeof cycle !== 'undefined') && isCyclic(cycle)) {
                        return cycle;
                    } 
                }
            }
        }
    }
}

/* Functions for generating the nth P_k number, for 3 <= k <= 8 */
var P = {
    '3': function(n) { return n*(n + 1)/2; },
    '4': function(n) { return n*n; },
    '5': function(n) { return n*(3*n - 1)/2; },
    '6': function(n) { return n*(2*n - 1); },
    '7': function(n) { return n*(5*n - 3)/2; },
    '8': function(n) { return n*(3*n - 2); }
};

var n;
var kString;
var pkMax;
var pStrings = [];
for (var i = 0; i < 6; i++) {
    pStrings.push([]);
}

/* Generate all 4-digit P(k, n) numbers */
for (var k = 3; k < 9; k++) {
    kString = k.toString();
    n = 1;
    pkMax = 1;
    while (pkMax < 1000) {
        n++;
        pkMax = P[kString](n);
    }
    while (pkMax < 10000) {
        pStrings[k-3].push(pkMax.toString());
        n++;
        pkMax = P[kString](n);
    }
}

n = 0;
var ansList;
while ((typeof ansList === 'undefined') && n < pStrings[5].length) {
    pStringsCopy = [];
    for (var i = 0; i < 6; i++) {
        pStringsCopy.push(pStrings[i].slice(0));
    }
    ansList = findCycle(pStringsCopy.slice(0, 5).slice(0), [pStrings[5][n]], []);
    n++;
}

console.log(sumStringInts(ansList));

