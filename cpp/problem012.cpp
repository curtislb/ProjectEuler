/*
 * problem012.cpp
 *
 * Problem 12: Highly divisible triangular number
 *
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The
 * first ten terms would be:
 *
 *     1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 *
 *      1: 1
 *      3: 1, 3
 *      6: 1, 2, 3, 6
 *     10: 1, 2, 5, 10
 *     15: 1, 3, 5, 15
 *     21: 1, 3, 7, 21
 *     28: 1, 2, 4, 7, 14, 28
 *
 * We can see that 28 is the first triangle number to have over five divisors.
 * 
 * What is the value of the first triangle number to have over D divisors?
 * 
 * Author: Curtis Belmonte
 * Created: Aug 25, 2014
 */

#include <iostream>
#include <map>

#include "common.h"

using namespace std;

/* PARAMETERS ****************************************************************/

static const unsigned int D = 500; // default: 500

/* SOLUTION ******************************************************************/

/* Memoized vector of previously computed divisor counts. */
static map<common::Natural, common::Natural> divisor_counts;

/* Returns the number of divisors of n. Previous results are memoized. */
inline static common::Natural countDivisors(common::Natural n) {
    if (divisor_counts.count(n))
        // return the memoized result
        return divisor_counts[n];
    else
        // compute and memoize the number of divisors
        return divisor_counts[n] = common::countDivisors(n);
}

/* Returns the number of divisors of the nth triangle number. */
inline static common::Natural countTriangleDivisors(common::Natural n) {
    // because n and n + 1 are necessarily coprime, sum their divisor counts
    if (n % 2 == 0)
        // n component of triangle number is evenly divisible by 2
        return countDivisors(n / 2) * countDivisors(n + 1);
    else
        // n + 1 component of triangle number is evenly divisible by 2
        return countDivisors(n) * countDivisors((n + 1) / 2);
}

int main() {
    common::Natural n = 1;
    while (countTriangleDivisors(n) < D)
        n++;

    cout << common::triangle(n) << endl;
    return 0;
}
